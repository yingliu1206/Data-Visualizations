my_color <- coul[as.numeric(as.factor(edgeList$TargetName))]
str(edgeList)
par(mar=c(0,0,0,0))
# Make the plot
plot(MyGraph, vertex.color=my_color, vertex.size=c(15),
vertex.label.color="black",
vertex.label.dist=0,
edge.arrow.size = 0.5,
vertex.label.cex=0.8)
title("Vaccination Tweets-confidence", line = -1)
# Add a legend
legend("bottomright", legend=levels(as.factor(edgeList$TargetName))  , col = coul ,
bty = "n", pch=20 , pt.cex = 2, cex = .75, text.col=coul ,
horiz = FALSE, inset = c(0.1, 0.1))
plot(MyGraph, vertex.color=my_color, vertex.size=c(17),
vertex.label.color="black",
vertex.label.dist=0,
edge.arrow.size = 0.5,
vertex.label.cex=0.8)
title("Vaccination Tweets-confidence", line = -1)
# Add a legend
legend("bottomright", legend=levels(as.factor(edgeList$TargetName))  , col = coul ,
bty = "n", pch=20 , pt.cex = 2, cex = .75, text.col=coul ,
horiz = FALSE, inset = c(0.1, 0.1))
D3_network_Tweets <- networkD3::forceNetwork(
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 700, # Size of the plot (vertical)
width = 900,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-confidence.html", selfcontained = TRUE)
D3_network_Tweets <- networkD3::forceNetwork(
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 700, # Size of the plot (vertical)
width = 900,  # Size of the plot (horizontal)
fontSize = 8, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-confidence.html", selfcontained = TRUE)
(edgeList<-Rules_S)
(MyGraph <- igraph::simplify(igraph::graph.data.frame(edgeList, directed=TRUE)))
nodeList <- data.frame(ID = c(0:(igraph::vcount(MyGraph) - 1)),
# because networkD3 library requires IDs to start at 0
nName = igraph::V(MyGraph)$name)
## Node Degree
(nodeList <- cbind(nodeList, nodeDegree=igraph::degree(MyGraph,
v = igraph::V(MyGraph), mode = "all")))
## Betweenness
BetweenNess <- igraph::betweenness(MyGraph,
v = igraph::V(MyGraph),
directed = TRUE)
(nodeList <- cbind(nodeList, nodeBetweenness=BetweenNess))
# Recall that ...
# edgeList<-Rules_Sup
getNodeID <- function(x){
which(x == igraph::V(MyGraph)$name) - 1  #IDs start at 0
}
## UPDATE THIS !! depending on # choice
(getNodeID("salary"))
edgeList <- plyr::ddply(
Rules_Sup, .variables = c("SourceName", "TargetName" , "Weight"),
function (x) data.frame(SourceID = getNodeID(x$SourceName),
TargetID = getNodeID(x$TargetName)))
head(edgeList)
nrow(edgeList)
########################################################################
##############  Dice Sim ################################################
###########################################################################
#Calculate Dice similarities between all pairs of nodes
#The Dice similarity coefficient of two vertices is twice
#the number of common neighbors divided by the sum of the degrees
#of the vertices. Method dice calculates the pairwise Dice similarities
#for some (or all) of the vertices.
DiceSim <- igraph::similarity.dice(MyGraph, vids = igraph::V(MyGraph), mode = "all")
head(DiceSim)
#Create  data frame that contains the Dice similarity between any two vertices
F1 <- function(x) {data.frame(diceSim = DiceSim[x$SourceID +1, x$TargetID + 1])}
#Place a new column in edgeList with the Dice Sim
head(edgeList)
edgeList <- plyr::ddply(edgeList,
.variables=c("SourceName", "TargetName", "Weight",
"SourceID", "TargetID"),
function(x) data.frame(F1(x)))
head(edgeList)
##################################################################################
##################   color #################################################
######################################################
# COLOR_P <- colorRampPalette(c("#00FF00", "#FF0000"),
#                             bias = nrow(edgeList), space = "rgb",
#                             interpolate = "linear")
# COLOR_P
# (colCodes <- COLOR_P(length(unique(edgeList$diceSim))))
# edges_col <- sapply(edgeList$diceSim,
#                     function(x) colCodes[which(sort(unique(edgeList$diceSim)) == x)])
# nrow(edges_col)
## NetworkD3 Object
#https://www.rdocumentation.org/packages/networkD3/versions/0.4/topics/forceNetwork
D3_network_Tweets <- networkD3::forceNetwork(
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 700, # Size of the plot (vertical)
width = 900,  # Size of the plot (horizontal)
fontSize = 8, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-support.html", selfcontained = TRUE)
D3_network_Tweets <- networkD3::forceNetwork(
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 1000, # Size of the plot (vertical)
width = 1200,  # Size of the plot (horizontal)
fontSize = 8, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-support.html", selfcontained = TRUE)
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 700,  # Size of the plot (horizontal)
fontSize = 8, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-support.html", selfcontained = TRUE)
D3_network_Tweets <- networkD3::forceNetwork(
Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 700, # Size of the plot (vertical)
width = 900,  # Size of the plot (horizontal)
fontSize = 10, # Font size
linkDistance = networkD3::JS("function(d) { return d.value*1000; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value*5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 5, # opacity of labels when static
linkColour = "red"   ###"edges_col"red"# edge colors
)
# Plot network
#D3_network_Tweets
# Save network as html file
networkD3::saveNetwork(D3_network_Tweets,
"NetD3_vaccination_tweets-support.html", selfcontained = TRUE)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(xts)
library(ggplot2)
library(dplyr)
library(leaflet)
library(DT)
library(maps)
library(maptools)
library(viridisLite)
library(highcharter)
install.packages('highcharater')
library(highcharter)
install.packages('highcharater')
install.packages("highcharater")
library(treemap)
install.packages("treemap")
library(treemap)
library(viridisLite)
devtools::install_github("jbkunst/highcharter")
library(highcharter)
setwd("/Users/LiuYing/Desktop/GU/2021-summer/assignment/assignment4/part2/")
quake<- read.csv("database.csv")
quake <- quake[,c("Date", "Time", "Latitude", "Longitude", "Type", "Depth", "Magnitude", "Magnitude.Type") ]
quake$Date <- as.Date(quake$Date, format = "%m/%d/%Y")
quake$Year<- year(quake$Date)
quake$Month <- month(quake$Date)
quake$Day <- day(quake$Date)
View(quake)
```{r}
quake %>%
leaflet() %>%
addTiles() %>%
addMarkers(lat=quake$Latitude, lng=quake$Longitude, clusterOptions = markerClusterOptions(),
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time
))
```{r}
quake %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat=quake$Latitude, lng=quake$Longitude, weight=1, radius=1,
color= ifelse(quake$Magnitude>6.5,"red","yellow"),stroke=TRUE,
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time)) %>%
addLegend(labels=c("Magnitude > 6.5", "Magnitude < 6.5"), colors=c("red","yellow"))
quake %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat=quake$Latitude, lng=quake$Longitude, weight=1, radius=1,
color= ifelse(quake$Magnitude>6.5,"red","yellow"),stroke=TRUE,
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time)) %>%
addLegend(labels=c("Magnitude > 6.5", "Magnitude < 6.5"), colors=c("red","yellow"))
quake %>%
leaflet() %>%
addTiles() %>%
addMarkers(lat=quake$Latitude, lng=quake$Longitude, clusterOptions = markerClusterOptions(),
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time
))
```{r}
quake %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat=quake$Latitude, lng=quake$Longitude, weight=1, radius=1,
color= ifelse(quake$Magnitude>6.5,"red","yellow"),stroke=TRUE,
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time)) %>%
addLegend(labels=c("Magnitude > 6.5", "Magnitude < 6.5"), colors=c("red","yellow"))
```
quake %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat=quake$Latitude, lng=quake$Longitude, weight=1, radius=1,
color= ifelse(quake$Magnitude>6.5,"red","yellow"),stroke=TRUE,
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time)) %>%
addLegend(labels=c("Magnitude > 6.5", "Magnitude < 6.5"), colors=c("red","yellow"))
quake %>%
leaflet() %>%
addTiles() %>%
addMarkers(lat=quake$Latitude, lng=quake$Longitude, clusterOptions = markerClusterOptions(),
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
quake %>%
leaflet() %>%
addTiles() %>%
addMarkers(lat=quake$Latitude, lng=quake$Longitude, clusterOptions = markerClusterOptions(),
popup= paste(quake$Type,
"<br><strong>Magnitude: </strong>", quake$Magnitude,
"<br><strong>Depth: </strong>", quake$Depth,
"<br><strong>Date: </strong>", quake$Date,
"<br><strong>Date: </strong>", quake$Time
))
setup_twitter_oauth(consumerKey,consumerSecret,access_Token,access_Secret)
Search<-twitteR::searchTwitter("#Pfizer & BioNTech vaccine",n=15,lang = "en")
##, since="2021-01-01")
(Search_DF <- twListToDF(Search))
TransactionTweetsFile = "TweetResults.csv"
(Search_DF$text[10])
library(rlang)
library(usethis)
library(devtools)
#install.packages("base64enc")
library(base64enc)
#install.packages("RCurl")
library(RCurl)
#devtools::install_version("httr", version="0.6.0", repos="http://cran.us.r-project.org")
#devtools::install_version("twitteR", version="1.1.8", repos="http://cran.us.r-project.org")
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(httr)
library(twitteR)
### Install the needed packages...
#install.packages("twitteR")
#install.packages("ROAuth")
# install.packages("rtweet")
library(ROAuth)
library(networkD3)
## If trouble use detach and then install and
## do library
library(arules)
library(rtweet)
library(jsonlite)
#install.packages("streamR")
library(streamR)
#install.packages("rjson")
library(rjson)
#install.packages("tokenizers")
library(tokenizers)
library(tidyverse)
library(plyr)
library(dplyr)
library(ggplot2)
#install.packages("syuzhet")  ## sentiment analysis
library(syuzhet)
library(stringr)
library(arulesViz)
library(igraph)
library(httpuv)
library(openssl)
setup_twitter_oauth(consumerKey,consumerSecret,access_Token,access_Secret)
Search<-twitteR::searchTwitter("#Pfizer & BioNTech vaccine",n=15,lang = "en")
##, since="2021-01-01")
(Search_DF <- twListToDF(Search))
TransactionTweetsFile = "TweetResults.csv"
(Search_DF$text[10])
Search_D = read.csv("vaccination_tweets.csv")
(Search_DF$text[10])
Search_DF = read.csv("vaccination_tweets.csv")
(Search_DF$text[10])
Trans <- file(TransactionTweetsFile)
## Tokenize to words
Tokens<-tokenizers::tokenize_words(
Search_DF$text[1],stopwords = stopwords::stopwords("en"),
lowercase = TRUE,  strip_punct = TRUE, strip_numeric = TRUE,
simplify = TRUE)
## Write tokens
cat(unlist(Tokens), "\n", file=Trans, sep=",")
close(Trans)
## Append remaining lists of tokens into file
## Recall - a list of tokens is the set of words from a Tweet
Trans <- file(TransactionTweetsFile, open = "a")
for(i in 2:nrow(Search_DF)){
Tokens<-tokenizers::tokenize_words(Search_DF$text[i],stopwords = stopwords::stopwords("en"),
lowercase = TRUE,  strip_punct = TRUE, simplify = TRUE)
cat(unlist(Tokens), "\n", file=Trans, sep=",")
}
close(Trans)
## Read the transactions data into a dataframe
TweetDF <- read.csv(TransactionTweetsFile,
header = FALSE, sep = ",")
head(TweetDF)
(str(TweetDF))
## Convert all columns to char
TweetDF<-TweetDF %>%
mutate_all(as.character)
(str(TweetDF))
# We can now remove certain words
TweetDF[TweetDF == "t.co"] <- ""
TweetDF[TweetDF == "rt"] <- ""
TweetDF[TweetDF == "http"] <- ""
TweetDF[TweetDF == "https"] <- ""
## Clean with grepl - every row in each column
MyDF<-NULL
MyDF2<-NULL
for (i in 1:ncol(TweetDF)){
MyList=c()
MyList2=c() # each list is a column of logicals ...
MyList=c(MyList,grepl("[[:digit:]]", TweetDF[[i]]))
MyDF<-cbind(MyDF,MyList)  ## create a logical DF
MyList2=c(MyList2,(nchar(TweetDF[[i]])<4 | nchar(TweetDF[[i]])>9))
MyDF2<-cbind(MyDF2,MyList2)
## TRUE is when a cell has a word that contains digits
}
## For all TRUE, replace with blank
TweetDF[MyDF] <- ""
TweetDF[MyDF2] <- ""
(head(TweetDF,10))
TweetDF = TweetDF[rowSums(is.na(TweetDF)) == 0,]
TweetDF_new = TweetDF[1:32,]
# Now we save the dataframe using the write table command
write.table(TweetDF_new, file = "UpdatedTweetFile.csv", col.names = FALSE,
row.names = FALSE, sep = ",")
TweetTrans <- read.transactions("UpdatedTweetFile.csv", sep =",",
format("basket"),  rm.duplicates = TRUE)
############ Create the Rules  - Relationships ###########
TweetTrans_rules = arules::apriori(TweetTrans,
parameter = list(support=.06, conf=1, minlen=2))
#maxlen
#appearance = list (default="lhs",rhs="milk")
inspect(TweetTrans_rules[1:20])
##  SOrt by Conf
SortedRules_conf <- sort(TweetTrans_rules, by="confidence", decreasing=TRUE)
inspect(SortedRules_conf[1:20])
SortedRules_sup <- sort(TweetTrans_rules, by="support", decreasing=TRUE)
inspect(SortedRules_sup[1:20])
## Sort by Lift
SortedRules_lift <- sort(TweetTrans_rules, by="lift", decreasing=TRUE)
inspect(SortedRules_lift[1:20])
TweetTrans_rules<-SortedRules_lift[1:50]
inspect(TweetTrans_rules)
## Convert the RULES to a DATAFRAME
Rules_DF2<-DATAFRAME(TweetTrans_rules, separate = TRUE)
(head(Rules_DF2))
str(Rules_DF2)
## Convert to char
Rules_DF2$LHS<-as.character(Rules_DF2$LHS)
Rules_DF2$RHS<-as.character(Rules_DF2$RHS)
## Remove all {}
Rules_DF2[] <- lapply(Rules_DF2, gsub, pattern='[{]', replacement='')
Rules_DF2[] <- lapply(Rules_DF2, gsub, pattern='[}]', replacement='')
head(Rules_DF2)
Rules_L<-Rules_DF2[c(1,2,5)]
names(Rules_L) <- c("SourceName", "TargetName", "Weight")
head(Rules_L,30)
head(Rules_L,30)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/LiuYing/Desktop/GU/2021-summer/assignment/assignment4/part2/")
quake<- read.csv("database.csv")
quake <- quake[,c("Date", "Time", "Latitude", "Longitude", "Type", "Depth", "Magnitude", "Magnitude.Type") ]
quake$Date <- as.Date(quake$Date, format = "%m/%d/%Y")
quake$Year<- year(quake$Date)
library(lubridate)
library(xts)
library(ggplot2)
library(dplyr)
library(leaflet)
library(DT)
library(maps)
library(maptools)
library(viridisLite)
library(highcharter)
library(treemap)
library(viridisLite)
quake$Date <- as.Date(quake$Date, format = "%m/%d/%Y")
quake$Year<- year(quake$Date)
quake$Month <- month(quake$Date)
quake$Day <- day(quake$Date)
View(quake)
View(quake)
quake$Date <- as.Date(quake$Date, format = "%m/%d/%Y")
quake$Year<- year(quake$Date)
quake$Month <- month(quake$Date)
quake$Day <- day(quake$Date)
head(quake)
