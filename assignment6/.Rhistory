theme(legend.position = "none") +
sam
options(repr.plot.width=20, repr.plot.height=15)
options(warn=-1)
tt = telco %>% ggplot(mapping = aes(x = TotalCharges)) +
geom_bar(aes(fill = Churn),alpha = 0.7) +
theme_minimal()+
xlab("Total Charges ($)")+
ylab("Count") +
ggtitle("28. Total Charges Bar Graph with Churn Overlay\n(Not Normalized)")+
theme(legend.position = "none") +
sam
tt1 = telco %>% ggplot(mapping = aes(x = TotalCharges)) +
geom_bar(aes(fill = Churn),position = 'fill',alpha=0.7) +
scale_y_continuous(labels = scales::percent_format())+
theme_minimal()+
xlab("Total Charges ($)")+
ylab("Prop") +
ggtitle("29. Total Charges Bar Graph with Churn Overlay \n(Normalized)") +
sam
tt2 = telco %>%  ggplot(aes(x =TotalCharges,fill = Churn)) +
geom_density(alpha=0.7,color="black") +
xlab("Total Charges") +
ylab("Prop") +
ggtitle("30. Total Charges Density Graph with Churn") +
theme_minimal()+
sam
plot_grid(tt,tt2,tt1,nrow=3,ncol=1)
telco %>% ggplot(mapping = aes(x = TotalCharges)) +
geom_bar(aes(fill = Churn),alpha = 0.7) +
theme_minimal()+
xlab("Total Charges ($)")+
ylab("Count") +
ggtitle("28. Total Charges Bar Graph with Churn Overlay\n(Not Normalized)")+
theme(legend.position = "none") +
sam
options(repr.plot.width=15, repr.plot.height=9)
ggpairs(telco,columns = c("tenure","MonthlyCharges","TotalCharges"),ggplot2::aes(color = Churn)) +
theme_economist()+
sam
library(ggpairs)
install.packages('ggpairs')
library(ggpairs)
install.packages('ggpairs')
library(ggpairs)
options(repr.plot.width=20, repr.plot.height=15)
options(warn=-1)
tt = telco %>% ggplot(mapping = aes(x = TotalCharges)) +
geom_bar(aes(fill = Churn),alpha = 0.7) +
theme_minimal()+
xlab("Total Charges ($)")+
ylab("Count") +
ggtitle("28. Total Charges Bar Graph with Churn Overlay\n(Not Normalized)")+
theme(legend.position = "none") +
sam
tt1 = telco %>% ggplot(mapping = aes(x = TotalCharges)) +
geom_bar(aes(fill = Churn),position = 'fill',alpha=0.7) +
scale_y_continuous(labels = scales::percent_format())+
theme_minimal()+
xlab("Total Charges ($)")+
ylab("Prop") +
ggtitle("29. Total Charges Bar Graph with Churn Overlay \n(Normalized)") +
sam
tt2 = telco %>%  ggplot(aes(x =TotalCharges,fill = Churn)) +
geom_density(alpha=0.7,color="black") +
xlab("Total Charges") +
ylab("Prop") +
ggtitle("30. Total Charges Density Graph with Churn") +
theme_minimal()+
sam
plot_grid(tt,tt2,tt1,nrow=3,ncol=1)
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 8, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','partner','PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 8, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','partner','PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target(telco,'Churn',c('gender','Partner','PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 3, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','Partner','PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 0.6, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','Partner','PhoneService',"InternetService", 'PaymentMethod'))
sam = theme(plot.background = element_rect(fill="#F5FFFA",color = "darkblue"),
plot.title = element_text(size=13, hjust=.5),
axis.title.x = element_text(size=10, color = "black"),
axis.title.y = element_text(size=10, color = "black"),
axis.text.x = element_text(size=7),
axis.text.y = element_text(size=7),
legend.position = "top",
legend.text = element_text(size=7),
legend.title = element_text(size=7))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 0.6, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','Partner','PhoneService',"InternetService", 'PaymentMethod'))
sam = theme(plot.background = element_rect(fill="#F5FFFA",color = "darkblue"),
plot.title = element_text(size=10, hjust=.5),
axis.title.x = element_text(size=10, color = "black"),
axis.title.y = element_text(size=10, color = "black"),
axis.text.x = element_text(size=7),
axis.text.y = element_text(size=7),
legend.position = "top",
legend.text = element_text(size=7),
legend.title = element_text(size=7))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 1.5, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','Partner','PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target(telco,'Churn',c('gender','Partner'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 3, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('gender','Partner'))
plot_categorical_vs_target(telco,'Churn',c('PhoneService',"InternetService", 'PaymentMethod'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 2, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('PhoneService',"InternetService"))
plot_categorical_vs_target(telco,'Churn',c('PaymentMethod'))
plot_categorical_vs_target = function(data, target, list_of_variables){
target <- sym(target) #Converting the string to a column reference
i <-1
plt_matrix <- list()
for(column in list_of_variables){
col <- sym(column)
temp <- data %>% group_by(!!sym(col),!!sym(target)) %>%
dplyr::summarize(count = n()) %>%
mutate(prop = round(count/sum(count),2)) %>%
ungroup()%>%
mutate(label_text = str_glue("n : {count}\nprop:{scales::percent(prop)}"))
options(repr.plot.width=20, repr.plot.height=15)
plt_matrix[[i]]<-ggplot(data= temp, aes(x=!!sym(col), y=prop,fill =!!sym(target))) +
geom_bar(stat="identity",alpha=0.7,color = "black") +
geom_label(aes(label=label_text),size = 3, hjust = 0.5, fill = "white",color="black") +
scale_y_continuous(labels=scales::percent_format()) +
xlab(column) +
ylab("Prop") +
ggtitle(paste("Distribution of 'churn'\nfrequency across",column)) +
theme_minimal()+
theme(axis.text.x = element_text(angle=10))+
sam
i<-i+1
}
plot_grid(plotlist = plt_matrix,ncol=2)
}
plot_categorical_vs_target(telco,'Churn',c('PaymentMethod'))
train <- read.csv("/Users/LiuYing/Desktop/GU/2021-summer/assignment/assignment4/part2/train.csv", stringsAsFactors = FALSE)
str(train)
library(dplyr)
library(leaflet)
library(leaflet.extras)
install.packages("leaflet.extras")
install.packages("leaflet.extras")
library(dplyr)
library(leaflet)
library(leaflet.extras)
train <- read.csv("/Users/LiuYing/Desktop/GU/2021-summer/assignment/assignment4/part2/train.csv", stringsAsFactors = FALSE)
str(train)
train$Date <- as.Date(train$Date, format = "%Y-%m-%d")
summary(train)
train %>%
filter(Province.State == Country.Region) %>%
select(Province.State, Country.Region) %>%
distinct()
for(i in 1:nrow(train)) {
if(train$Province.State[i] == train$Country.Region[i]) {
train$Province.State[i] <- ""
}
}
week_start_dates <- seq(
from = min(train$Date),
to = max(train$Date),
by = 7
)
week_start_dates
Jan_22 <- train %>% filter(Date == week_start_dates[1])
Jan_29 <- train %>% filter(Date == week_start_dates[2])
Feb_05 <- train %>% filter(Date == week_start_dates[3])
Feb_12 <- train %>% filter(Date == week_start_dates[4])
Feb_19 <- train %>% filter(Date == week_start_dates[5])
Feb_26 <- train %>% filter(Date == week_start_dates[6])
Mar_04 <- train %>% filter(Date == week_start_dates[7])
Mar_11 <- train %>% filter(Date == week_start_dates[8])
Mar_18 <- train %>% filter(Date == week_start_dates[9])
leaflet() %>%
addProviderTiles("CartoDB") %>%
setView(lng = 0, lat = 10, zoom = 1.5) %>%
addCircleMarkers(
group = "22-Jan-2020",
data = Jan_22,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "29-Jan-2020",
data = Jan_29,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "05-Feb-2020",
data = Feb_05,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "12-Feb-2020",
data = Feb_12,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "19-Feb-2020",
data = Feb_19,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "26-Feb-2020",
data = Feb_26,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "04-Mar-2020",
data = Mar_04,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "11-Mar-2020",
data = Mar_11,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addCircleMarkers(
group = "18-Mar-2020",
data = Mar_18,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(ConfirmedCases + 1),
color = "orange",
fillOpacity = ~ ifelse(ConfirmedCases > 0, 1, 0),
stroke = FALSE,
label = ~ paste0(Province.State, " ", Country.Region, ": ", ConfirmedCases),
popup = ~ paste0("<b>", Province.State, " ", Country.Region, "</b><br>Confirmed Cases: ", ConfirmedCases)
) %>%
addLayersControl(
baseGroups = c("22-Jan-2020", "29-Jan-2020", "05-Feb-2020", "12-Feb-2020", "19-Feb-2020", "26-Feb-2020", "04-Mar-2020", "11-Mar-2020", "18-Mar-2020"),
position = "bottomleft",
options = layersControlOptions(collapsed = FALSE)
) %>%
addResetMapButton()
library(tm)
library(data.table)
library(shiny)
getwd()
read.csv("./Desktop/GU/2021-summer/assignment/assignment6/debate.csv")
runApp('Desktop/GU/2021-summer/assignment/assignment6/assignment6.R')
getwd()
runApp('Desktop/GU/2021-summer/assignment/assignment6/assignment6.R')
getwd()
setwd("./Desktop/GU/2021-summer/assignment/assignment6")
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
setwd("~/Desktop/GU/2021-summer/assignment/assignment6")
runApp('assignment6.R')
runApp('assignment6.R')
runApp('assignment6.R')
